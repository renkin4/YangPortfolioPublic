import{_ as t,c as i,a0 as r,o}from"./chunks/framework.Bf2oz8X3.js";const h=JSON.parse('{"title":"JTower RND Project","description":"","frontmatter":{},"headers":[],"relativePath":"portfolios/jtower.md","filePath":"portfolios/jtower.md"}'),a={name:"portfolios/jtower.md"};function n(s,e,l,c,d,p){return o(),i("div",null,e[0]||(e[0]=[r('<h1 id="jtower-rnd-project" tabindex="-1">JTower RND Project <a class="header-anchor" href="#jtower-rnd-project" aria-label="Permalink to &quot;JTower RND Project&quot;">​</a></h1><img src="https://jtowerv2.studiomultiply.com/assets/JTower_logo.4d7b8519.svg" width="200"><h2 id="archviz-sales-kit-demo-website-overview" tabindex="-1">Archviz Sales Kit Demo Website Overview <a class="header-anchor" href="#archviz-sales-kit-demo-website-overview" aria-label="Permalink to &quot;Archviz Sales Kit Demo Website Overview&quot;">​</a></h2><p>After completing the Trinity Website project, the management saw potential in the web-based approach and requested a new website to serve as a <strong>Demo Application for an Archviz Sales Kit</strong>. This project aimed to showcase key features and interactive elements to clients.</p><h2 id="key-project-details" tabindex="-1">Key Project Details: <a class="header-anchor" href="#key-project-details" aria-label="Permalink to &quot;Key Project Details:&quot;">​</a></h2><ul><li><p><strong>Landmark Visualization with Google WebGL</strong>: For the landmark feature, I utilized Google’s beta version of WebGL rendering. At the time, there was minimal documentation available, requiring significant reverse engineering to get the system working effectively. It was a challenging yet rewarding process.</p></li><li><p><strong>Virtual Tour</strong>: The virtual tour implementation followed a similar structure to the one developed for the Trinity Website, offering an immersive exploration experience.</p></li><li><p><strong>Unit Type Showcase</strong>: This feature was tied to Firebase for demonstration purposes. It utilized image rendering with 3D hitbox projection, achieved through GLSL and ThreeJS. The system created an illusion of depth and interactivity, allowing for a beautiful future render with interactive elements. I take pride in designing this innovative projection technique.</p></li><li><p><strong>Gallery</strong>: A simple mosaic-style gallery was created using basic HTML, providing a clean and organized way to showcase images.</p></li><li><p><strong>Cinematic Mode</strong>: A cinematic mode was added as a screen saver, allowing agents to display an engaging visual sequence when no customers are present.</p></li><li><p><strong>PWA Integration</strong>: To enhance usability and portability, I implemented <strong>Progressive Web App (PWA) capabilities</strong>, enabling the application to be downloaded and used on tablets.</p></li><li><p><strong>Tech Stack</strong>: This project was developed using <strong>Firebase</strong>, <strong>ThreeJS + GLSL</strong>, <strong>VueJS</strong>, and <strong>Google WebGL</strong>.</p></li></ul><p><a href="https://jtowerv2.studiomultiply.com/" target="_blank" rel="noreferrer">Website</a></p>',7)]))}const m=t(a,[["render",n]]);export{h as __pageData,m as default};
