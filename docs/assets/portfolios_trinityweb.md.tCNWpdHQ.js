import{_ as t,c as i,a0 as a,o}from"./chunks/framework.tSOPSn7n.js";const r="/YangPortfolioPublic/docs/assets/TrinityWeb.CpRoOp3A.webp",u=JSON.parse('{"title":"Trinity Website","description":"","frontmatter":{},"headers":[],"relativePath":"portfolios/trinityweb.md","filePath":"portfolios/trinityweb.md"}'),n={name:"portfolios/trinityweb.md"};function s(l,e,c,p,g,d){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="trinity-website" tabindex="-1">Trinity Website <a class="header-anchor" href="#trinity-website" aria-label="Permalink to &quot;Trinity Website&quot;">​</a></h1><p><img src="'+r+'" alt="Trinity web image"></p><p>The <strong>Trinity Website</strong> was the first architectural visualization (archviz) project I developed for a client at Studio Multiply. The goal was to create a visually compelling website that runs smoothly while integrating several advanced features.</p><h2 id="key-project-details" tabindex="-1">Key Project Details: <a class="header-anchor" href="#key-project-details" aria-label="Permalink to &quot;Key Project Details:&quot;">​</a></h2><ul><li><p><strong>Exploring New Technologies</strong>: Throughout the project, I explored new technologies that I hadn’t extensively used before, like SVG rendering. Although the results were not as refined as I hoped, experimenting with SVG provided valuable insights into scalable vector graphics on the web.</p></li><li><p><strong>Interactive 3D Projections for Facilities</strong>: In the <strong>Facilities Tab</strong>, I implemented a unique feature using 3D projection. This technique allowed me to project 3D coordinates onto a beautifully rendered 2D image, creating pixel-accurate hitboxes representing facility locations. These hitboxes triggered web-based UI elements at the exact positions on the screen, enhancing interactivity and precision.</p></li><li><p><strong>Panorama View for Balcony Tab</strong>: For the <strong>Balcony Tab</strong>, I utilized a combination of images and SVG mapping to create static image hitboxes. Clicking on a building block triggered a panoramic view, simulating the perspective of standing on that specific floor.</p></li><li><p><strong>Cross-Platform Support via PWA Integration</strong>: To ensure a seamless experience across devices, I integrated Progressive Web App (PWA) capabilities. This allowed the Trinity website to function as an app on iPads and Android devices, enabling installation on all of the client&#39;s agent machines.</p></li><li><p><strong>Tech Stack</strong>: The website was developed using <strong>VueJS</strong> for the front-end framework, and <strong>ThreeJS + GLSL</strong> for 3D rendering and graphics.</p></li></ul><p><a href="https://trinity.studiomultiply.com/" target="_blank" rel="noreferrer">Website</a></p>',6)]))}const b=t(n,[["render",s]]);export{u as __pageData,b as default};
