import{_ as n,c as a,j as e,a as o,a0 as i,o as r}from"./chunks/framework.Bf2oz8X3.js";const m=JSON.parse('{"title":"Diian","description":"","frontmatter":{},"headers":[],"relativePath":"portfolios/Diian.md","filePath":"portfolios/Diian.md"}'),s={name:"portfolios/Diian.md"};function l(d,t,c,g,h,p){return r(),a("div",null,t[0]||(t[0]=[e("h1",{id:"diian",tabindex:"-1"},[o("Diian "),e("a",{class:"header-anchor",href:"#diian","aria-label":'Permalink to "Diian"'},"​")],-1),e("iframe",{src:"https://drive.google.com/file/d/11idBt2OZwwaRh1hiHc0Q2YA4fZrBLhrB/preview",width:"640",height:"480",allow:"autoplay",allowfullscreen:"allowfullscreen"},null,-1),i('<h2 id="unreal-engine-5-early-access-project-overview" tabindex="-1">Unreal Engine 5 Early Access Project Overview <a class="header-anchor" href="#unreal-engine-5-early-access-project-overview" aria-label="Permalink to &quot;Unreal Engine 5 Early Access Project Overview&quot;">​</a></h2><p>This project was a significant milestone, developed during Unreal Engine 5’s Early Access phase. As a developer with a passion for new technologies, I saw the potential of <strong>Unreal Engine 5</strong> and its powerful features, <strong>Nanite</strong> and <strong>Lumen</strong>. Without hesitation, I chose UE5 to build this project, embracing its advanced capabilities to push the boundaries of real-time rendering.</p><h2 id="key-project-details" tabindex="-1">Key Project Details: <a class="header-anchor" href="#key-project-details" aria-label="Permalink to &quot;Key Project Details:&quot;">​</a></h2><ul><li><p><strong>Cutting-edge Technology</strong>: The project was built using <strong>C++ and Blueprint</strong>. By utilizing UE5’s real-time capabilities and avoiding traditional light baking, I was able to achieve faster iteration times. However, this came at a cost, as the project required high-performance hardware to handle Lumen’s dynamic global illumination and Raytracing.</p></li><li><p><strong>Challenges with New Features</strong>: One of the most significant challenges was adapting to UE5’s early access features like <strong>Nanite</strong> and <strong>Lumen</strong>. Due to the early stage of these technologies, there were limited solutions available online, which required a lot of experimentation and problem-solving. Despite these challenges, we successfully completed the project and delivered it to the client.</p></li><li><p><strong>UI Development with Slate</strong>: Another key hurdle was addressing the limitations of UE5’s default Blueprint Widget System. When dealing with screen space constraints and rendering issues, I opted to use <strong>Slate</strong>, which offered better control and stability for the project’s UI elements.</p></li></ul><h2 id="ipad-version" tabindex="-1">IPad version <a class="header-anchor" href="#ipad-version" aria-label="Permalink to &quot;IPad version&quot;">​</a></h2>',5),e("iframe",{src:"https://drive.google.com/file/d/11idBt2OZwwaRh1hiHc0Q2YA4fZrBLhrB/preview",width:"640",height:"480",allow:"autoplay",allowfullscreen:"allowfullscreen"},null,-1),i('<p>This project was initially planned to be developed using <strong>Unreal Engine 5</strong>; however, due to the instability of UE5 during its Early Access phase, the project was split between two engines. The <strong>PC version</strong> was built in <strong>UE5</strong>, while the <strong>iPad version</strong> was developed using <strong>UE4</strong>. The project utilized <strong>C++ and Blueprint</strong> for its implementation.</p><h2 id="key-project-details-1" tabindex="-1">Key Project Details: <a class="header-anchor" href="#key-project-details-1" aria-label="Permalink to &quot;Key Project Details:&quot;">​</a></h2><ul><li><p><strong>Downgrading and Adaptation</strong>: Significant effort was required to downgrade the iPad version to UE4, which involved balancing technical adjustments with maintaining visual fidelity. This experience led to improvements in my artistic skills, particularly in lighting, color management, and UI presentation.</p></li><li><p><strong>Optimized Level/Scene Structure</strong>: The project was divided into multiple levels/scenes, which facilitated optimization and better asset handling. However, developing for <strong>iOS</strong> posed its own set of challenges, particularly given the hardware limitations of mobile devices. As a result, we employed creative optimization techniques to achieve the best visual quality possible.</p></li><li><p><strong>Rendering Workflow</strong>:</p><ul><li><strong>Surrounding Area</strong>: The only real-time rendering element in the project, utilizing the engine’s capabilities for dynamic visuals.</li><li><strong>Dollhouse Rotation</strong>: Rendered using <strong>UE5 (Lumen)</strong> and the Sequencer tool for precise animation and lighting effects.</li><li><strong>Dollhouse Panorama</strong>: Rendered using <strong>UE4</strong> with baked lighting at maximum settings to achieve a high-quality panoramic view.</li><li><strong>Additional Renders</strong>: Other elements were pre-rendered using <strong>Corona</strong>, focusing on photorealistic quality where real-time rendering was not feasible.</li></ul></li><li><p><strong>Artistic and Technical Growth</strong>: Through this project, I honed my skills in lighting, colors, and UI presentation, balancing technical and artistic elements to create a polished final product.</p></li></ul>',3)]))}const f=n(s,[["render",l]]);export{m as __pageData,f as default};
