import{_ as t,c as i,a0 as n,o as r}from"./chunks/framework.tSOPSn7n.js";const u=JSON.parse('{"title":"Trinity Experience Center","description":"","frontmatter":{},"headers":[],"relativePath":"portfolios/trinityec.md","filePath":"portfolios/trinityec.md"}'),a={name:"portfolios/trinityec.md"};function o(l,e,s,c,p,d){return r(),i("div",null,e[0]||(e[0]=[n('<h1 id="trinity-experience-center" tabindex="-1">Trinity Experience Center <a class="header-anchor" href="#trinity-experience-center" aria-label="Permalink to &quot;Trinity Experience Center&quot;">​</a></h1><iframe src="https://drive.google.com/file/d/1x94gvfpDMluLeObR5j2l8xNVevSGNKFc/preview" width="640" height="480" allow="autoplay"></iframe><p>During my tenure at Studio Multiply, I worked on a complex Unreal Engine 4 project, integrating both C++ and Blueprint to achieve precise control over the system. The project faced significant challenges due to unforeseen internal issues with the client. Midway through development, our primary client contact left, resulting in multiple 180-degree shifts in project direction, which required agile adaptation and realignment of our approach.</p><h2 id="key-project-details" tabindex="-1">Key Project Details: <a class="header-anchor" href="#key-project-details" aria-label="Permalink to &quot;Key Project Details:&quot;">​</a></h2><ul><li><p><strong>Dual-Machine System</strong>: The system was designed to operate with two machines—one acting as the controller, managed by an Agent, and the other displaying a 4:1 LED screen running at 4K resolution. The requirement to render everything in 4K posed significant technical challenges, particularly in terms of optimization.</p></li><li><p><strong>C++ Development Focus</strong>: My primary responsibility was in C++ development to achieve fine-grained control over the monitor and the replication system. This enabled real-time synchronization and stable rendering across the dual-machine setup.</p></li><li><p><strong>Scene Complexity and Optimization</strong>: The application required the entire system to function within a single scene. This presented unique optimization challenges due to the scene&#39;s architecture, which featured nearly 20,000 buildings and extensive foliage. Traditional FPS optimization techniques like frustum or occlusion culling could not be fully leveraged due to the architectural visualization (archviz) context. Therefore, I devised innovative strategies involving streaming, dynamic hiding, and custom optimizations tailored for the large 4K display.</p></li></ul><p><a href="https://drive.google.com/file/d/1x94gvfpDMluLeObR5j2l8xNVevSGNKFc/view?usp=drive_link" target="_blank" rel="noreferrer">Google Drive</a></p>',6)]))}const g=t(a,[["render",o]]);export{u as __pageData,g as default};
